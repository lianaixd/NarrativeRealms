#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Armour", "DragonInvisible"]
    def "_010_table_tex_v01" (
        customData = {
            float3 rotationEulerHint = (-1.5707964, 1.5707963, 0)
        }
        references = @010_table_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (0.5, -0.5, 0.5, 0.5)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (2.3492135e-9, 0.93701565, -1.3045777)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "dude_normal_tex_v01" (
        active = false
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
        prepend references = @dude-normal_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.624922, 1.4065162, -1.383944)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.16833252, 0.2302674, 0.12704986)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (3.7252903e-9, 0.018941287, 0.012453463)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }
    }

    def "storypath_tex_v01" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707965, -0.52359873, -6.8825514e-8)
        }
        references = @storypath_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (0.6830126, -0.6830128, -0.18301263, -0.18301274)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-2.1187589e-8, 0.88906485, -1.3045777)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "lightbulb_tex_v01" (
        active = true
        references = @lightbulb_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.59879977, 1.4044458, -1.8218651)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/lightbulb_tex_v01/OnTap>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnTap"
        {
            rel actions = </Root/lightbulb_tex_v01/OnTap/Action>
            uniform bool exclusive
            rel triggers = </Root/lightbulb_tex_v01/OnTap/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/lightbulb_tex_v01>
                token info:id = "TapGesture"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/Dragon>
                rel animationLibraryKeyOverrideKey = </Root/lightbulb_tex_v01/OnTap/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def "microphone_tex_v01" (
        active = true
        customData = {
            float3 rotationEulerHint = (-0.33301514, -0.0794983, -0.2256791)
        }
        references = @microphone_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (0.9783823, -0.1689678, -0.020292314, -0.1174996)
        float3 xformOp:scale = (0.8, 0.8, 0.8)
        float3 xformOp:translate = (0.11879301, 0.9248144, -0.6968537)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "Microphone_MTL"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "PreviewSurface"
                {
                    delete float inputs:opacity.connect = </Root/microphone_tex_v01/Materials/Microphone_MTL/baseColorTextureShader.outputs:a>
                }
            }
        }
    }

    def "signpost_forest_tex_v01" (
        active = true
        references = @signpost-forest_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.14536753, 0.96175885, -1.6192367)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "signpost_desert_tex_v01" (
        active = true
        references = @signpost-desert_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.25426307, 0.9615891, -1.0436317)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "treasure_tex_v01" (
        customData = {
            float3 rotationEulerHint = (0.006982207, 0.0069822036, 0.006982207)
        }
        references = @treasure_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (0.99998176, 0.0034788663, 0.0035032397, 0.0034788663)
        float3 xformOp:scale = (0.39555463, 0.39555466, 0.39555463)
        float3 xformOp:translate = (-0.10184945, 0.9571943, -1.2058274)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "cottage_teapot_tex_v01" (
        references = @cottage-teapot_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.6, 0.6, 0.6)
        float3 xformOp:translate = (0.31137964, 0.9567636, -1.3672968)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "signopost_snow_tex_v01" (
        active = true
        references = @signopost-snow_tex_v01.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.0016879439, 0.9612769, -0.9232943)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "dragon_anim_v03" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @dragon_anim_v03.usdz@
    )
    {
        rel material:binding = </Root/dragon_anim_v03/mtl/pasted__dragon_tex_v01_Dragon_MTL> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.0059894025, 0.0059894025, 0.0059894025)
        float3 xformOp:translate = (-0.23775662, 0.9654597, -1.2181262)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "AnimationLibrary"
        {
            token info:id = "RealityKit.AnimationLibrary"

            def RealityKitAnimationFile "default_subtree_animation"
            {
                uniform bool looping = 1
                uniform string name = "default subtree animation"
            }

            def RealityKitClipDefinition "Clip_default_subtree_animation"
            {
                uniform string[] clipNames = ["Appear", "Breathe", "disappear"]
                uniform string sourceAnimationName = "default subtree animation"
                uniform double[] startTimes = [0, 1.5631596648858652, 4.099166666666667]
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/dragon_anim_v03/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/dragon_anim_v03/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/dragon_anim_v03/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/dragon_anim_v03>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/Dragon>
                rel animationLibraryKeyOverrideKey = </Root/dragon_anim_v03/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }

        def RealityKitComponent "HierarchicalFade"
        {
            uniform token info:id = "RealityKit.HierarchicalFade"
            float opacity = 0
        }
    }

    def "TestAnimation" (
        active = true
        references = @TestAnimation.usda@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.32, 0.2, -0.2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "AnimationLibrary"
        {
            uniform token info:id = "RealityKit.AnimationLibrary"

            def RealityKitClipDefinition "Clip_default_subtree_animation"
            {
                uniform string[] clipNames = ["Appear", "Idle", "IdleToRight", "rightToIdle", "IdleToLeft", "LeftToIdle", "DefaultToArmour", "ArmourIdle", "ArmourToRight", "RightToArmour", "ArmourToLeft", "LeftToArmour", "ArmourDisappear"]
                uniform string sourceAnimationName = "default subtree animation"
                uniform double[] startTimes = [0, 1.2177512764750378, 2.688025954992436, 3.724204009433962, 4.487815120545073, 5.269592898322851, 5.864259564989518, 7.098310571473553, 8.62200389641058, 9.557648453878407, 10.285648453878407, 11.245648453878406, 11.837981787211739]
            }
        }

        over "dude_org_anim_v02"
        {
            over "AnimationLibrary"
            {
                over "default_subtree_animation"
                {
                    uniform bool looping = 1
                    uniform string name = "default subtree animation"
                }
            }

            over "OnTap"
            {
                over "Action"
                {
                    rel affectedObjects = None
                    rel animationLibraryKey = None
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = [
                </Root/TestAnimation/OnAddedToScene>,
                </Root/TestAnimation/OnTap>,
            ]
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/TestAnimation/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/TestAnimation/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/TestAnimation>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/Tag>
                rel animationLibraryKeyOverrideKey = </Root/TestAnimation/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }

        def Preliminary_Behavior "OnTap"
        {
            rel actions = </Root/TestAnimation/OnTap/Action>
            uniform bool exclusive
            rel triggers = </Root/TestAnimation/OnTap/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/TestAnimation>
                token info:id = "TapGesture"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/Armour>
                rel animationLibraryKeyOverrideKey = </Root/TestAnimation/OnTap/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def RealityKitTimeline "Dragon"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            reorder nameChildren = ["Animation", "DragonAppear", "Show"]
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "Breathe"
                int blendLayer = 500
                double duration = 2.536007001780802
                uniform token info:id = "C58348A6-4193-418C-AF6E-48AFEBFC1152"
                double loopCount = 0
                bool separateAnimatedValue = 1
                double startTime = 1.5631596649858646
                rel target = </Root/dragon_anim_v03>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "DragonAppear"
            {
                string actionKind = "animation"
                string animation = "Appear"
                int blendLayer = 500
                double duration = 1.5631596648858652
                uniform token info:id = "E07E0D35-C706-4A7B-979A-1F187CE81BA5"
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Root/dragon_anim_v03>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Show"
            {
                string actionKind = "show"
                int blendLayer = 300
                double duration = 0.27073423901873483
                uniform token info:id = "43ECF17C-E432-4F80-8481-6AE7E7877CE2"
                double startTime = 0
                rel target = </Root/dragon_anim_v03>

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Tag"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 1.4702746785173981
                uniform token info:id = "0A5E467B-4DF8-42CC-8679-6AF54D065EE2"
                double loopCount = 0
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Root/TestAnimation>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Armour"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "DefaultToArmour"
                int blendLayer = 500
                double duration = 1.2340510064840347
                uniform token info:id = "279AC070-EE07-4D6A-A3E3-D6997922946C"
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Root/TestAnimation>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2"
            {
                string actionKind = "animation"
                string animation = "ArmourIdle"
                int blendLayer = 500
                double duration = 1.5236933249370281
                uniform token info:id = "E6E22940-91B6-4C4F-93E3-970AC197A085"
                double loopCount = 0
                bool separateAnimatedValue = 1
                double startTime = 1.153666666766667
                rel target = </Root/TestAnimation>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def Xform "DirectionalLight"
    {
        float3 xformOp:translate = (1.6128147, 1.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            token info:id = "RealityKit.DirectionalLight"
            float intensity = 1145.708

            def RealityKitStruct "Shadow"
            {
            }
        }
    }

    def RealityKitTimeline "DragonInvisible"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Hide"
            {
                string actionKind = "hide"
                int blendLayer = 300
                double duration = 1
                uniform token info:id = "7AB8EDAB-DB0A-4BD1-9592-1CD90FC9774E"
                double startTime = 0
                rel target = </Root/dragon_anim_v03>

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }
}

